//-----------------------------------------------------------
//
//  demo使用的自定义cc-settings文件
//  主要是为了演示：
//      1. 自动注册组件B的processor
//      2. 全局拦截器的依赖
//
//-----------------------------------------------------------

//apply from: rootProject.file('cc-settings-2.gradle')



//注： 从CC 1.x升级到CC 2.x的用户，用此文件替换原来的cc-settings.gradle的同时，需要在根目录build.gradle中将插件地址按照如下方式更换一下：
// classpath 'com.billy.android:autoregister:x.x.x' -> classpath 'com.billy.android:cc-register:x.x.x'
//cc-register extension:
// 功能介绍：
//  完成组件、拦截器及跨进程json解释器等CC库自身需要的自动注册功能
//  支持新增自定义的其它自动注册功能，参考AutoRegister，用法参考cc-settings-demo.gradle
project.apply plugin: 'cc-register'
//def dependencyMode = (project.gradle.gradleVersion as float) >= 4.1F ? 'api' : 'compile'
def dependencyMode='api';
//project.dependencies.add(dependencyMode, project(":cc"))
project.dependencies.add(dependencyMode, "com.billy.android:cc:2.1.5")

//此文件是作为组件化配置的公共gradle脚本文件，在每个组件中都apply此文件，下载到工程根目录后，可以在下方添加一些自己工程中通用的配置
// 可参考cc-settings-demo.gradle
// 例如：
//      1. 添加全局拦截器、下沉的公共类库等一些公共基础库的依赖；
//      2. 添加自定义的通过cc-register实现的自动注册配置
//      3. 开启app内部多进程支持
//      4. 其它公共配置信息






dependencies {
//    implementation project(':demo_base')
    //2018-06-03新增：这里是为了示例添加全局拦截器
    if (project.ext.has('runAsApp') && project.ext.runAsApp) {
        //说明：需要兼容的情况有3种(单独组件作为app运行、打包在主app内、组件在多个app上复用但全局拦截器不同)
        //     为了兼容以上3种情况，建议将全局拦截器作为一个单独的module，在此处给不同app添加不同拦截器module
//        implementation project(':demo_interceptors')
    }
}
//auto register extension:
// 源码地址：https://github.com/luckybilly/AutoRegister
// 功能介绍：
//  在编译期扫描将打到apk包中的所有类
//  将 scanInterface的实现类 或 scanSuperClasses的子类
//  并在 codeInsertToClassName 类的 codeInsertToMethodName 方法中生成如下代码：
//  codeInsertToClassName.registerMethodName(scanInterface)
// 要点：
//  1. codeInsertToMethodName 若未指定，则默认为static块
//  2. codeInsertToMethodName 与 registerMethodName 需要同为static或非static
// 自动生成的代码示例：
/*
  在com.billy.app_lib_interface.CategoryManager.class文件中
  static
  {
    register(new CategoryA()); //scanInterface的实现类
    register(new CategoryB()); //scanSuperClass的子类
  }
 */
//ccregister.registerInfo.add([
//    //在自动注册组件的基础上增加：自动注册组件B的processor
//    'scanInterface'             : 'com.billy.cc.demo.component.b.processor.IActionProcessor'
//    , 'codeInsertToClassName'   : 'com.billy.cc.demo.component.b.ComponentB'
//    , 'codeInsertToMethodName'  : 'initProcessors'
//    , 'registerMethodName'      : 'add'
//])
//也可以按照上述格式继续添加你自己的自动注册需求，俗称：搭顺风车

//开启app内部多进程组件调用
ccregister.multiProcessEnabled = true
